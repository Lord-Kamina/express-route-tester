{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","node_modules/debounce/index.js","versions/0.1.7/index.js","versions/1.7.0/node_modules/path-to-regexp/index.js","versions/2.0.0/node_modules/path-to-regexp/index.js","versions/0.1.7/node_modules/path-to-regexp/index.js","versions/1.7.0/node_modules/isarray/index.js"],"names":["escape","str","replace","hide","selector","elements","document","querySelectorAll","i","length","style","display","show","updateOptions","e","target","id","opts","strict","checked","sensitive","end","update","setVersion","pathRegexp","versions","_","value","keys","regexp","innerHTML","message","textContent","toString","map","key","name","optional","join","updatePath","path","test","result","exec","debounce","require","0.1.7","1.7.0","2.0.0","querySelector","bind","addEventListener","func","wait","immediate","later","last","Date","now","timestamp","timeout","setTimeout","apply","context","args","debounced","this","arguments","callNow","clear","clearTimeout","flush","module","exports","parse","options","res","tokens","index","defaultDelimiter","delimiter","PATH_REGEXP","m","escaped","offset","slice","next","prefix","capture","group","modifier","asterisk","push","partial","repeat","pattern","escapeGroup","escapeString","substr","compile","tokensToFunction","encodeURIComponentPretty","encodeURI","c","charCodeAt","toUpperCase","encodeAsterisk","matches","Array","RegExp","obj","data","encode","pretty","encodeURIComponent","token","segment","TypeError","isarray","JSON","stringify","j","attachKeys","re","flags","regexpToRegexp","groups","source","match","arrayToRegexp","parts","pathToRegexp","stringToRegexp","tokensToRegExp","route","endsWithDelimiter","delimiters","pathEscaped","prev","k","indexOf","undefined","isArray","String","endsWith","concat","pathtoRegexp","extraOffset","keysOffset","MATCHING_GROUP_REGEXP","slash","format","star","len","escapeCount","charAt","splice","arr","Object","prototype","call"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict'\n\nvar debounce = require('debounce')\n\nvar pathRegexp\nvar versions = {\n  '0.1.7': require('./versions/0.1.7'),\n  '1.7.0': require('./versions/1.7.0'),\n  '2.0.0': require('./versions/2.0.0')\n}\n\nvar _ = document.querySelector.bind(document)\n\nfunction escape (str) {\n  str = '' + str\n  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\\"/g, '&quot;') // eslint-disable-line no-useless-escape\n}\nfunction hide (selector) {\n  var elements = document.querySelectorAll(selector)\n  for (var i = 0; i < elements.length; i++) {\n    elements[i].style.display = 'none'\n  }\n}\nfunction show (selector) {\n  var elements = document.querySelectorAll(selector)\n  for (var i = 0; i < elements.length; i++) {\n    elements[i].style.display = null\n  }\n}\n\n_('#inputStrict').addEventListener('change', updateOptions, false)\n_('#inputSensitive').addEventListener('change', updateOptions, false)\n_('#inputEnd').addEventListener('change', updateOptions, false)\n\n_('#inputVersion').addEventListener('change', setVersion, false)\n_('#inputRoute').addEventListener('input', debounce(update, 100), false)\n_('#inputPath').addEventListener('input', debounce(updatePath, 100), false)\n\nvar opts = {\n  strict: false,\n  sensitive: false,\n  end: true\n}\nfunction updateOptions (e) {\n  switch (e.target.id) {\n    case 'inputStrict':\n      opts.strict = e.target.checked\n      break\n    case 'inputSensitive':\n      opts.sensitive = e.target.checked\n      break\n    case 'inputEnd':\n      opts.end = e.target.checked\n      break\n  }\n  update()\n}\n\nfunction setVersion () {\n  pathRegexp = versions[_('#inputVersion').value] || pathRegexp\n  update()\n}\n\nvar keys, regexp\nfunction update () {\n  keys = []\n  try {\n    regexp = pathRegexp(_('#inputRoute').value, keys, opts)\n  } catch (e) {\n    show('.is-error')\n    hide('.is-not-match')\n    hide('.is-match')\n    _('#keys-results-display').innerHTML = '<pre><code>' + e.message + '</code></pre>'\n    return\n  }\n  _('#keys-results-display').innerHTML = ''\n  hide('.is-error')\n  _('#regexp-display').textContent = regexp.toString()\n  if (keys.length) {\n    _('#keys-display').innerHTML = '<ol>' + keys.map(function wrap (key) {\n      return '<li>' + escape(key.name) + (key.optional ? ' (optional)' : '') + '</li>'\n    }).join('') + '</ol>'\n  } else {\n    _('#keys-display').innerHTML = 'There are no keys captured by this route'\n  }\n  updatePath()\n}\nfunction updatePath () {\n  var path = _('#inputPath').value\n  if (regexp.test(path)) {\n    hide('.is-not-match')\n    show('.is-match')\n    var result = regexp.exec(path)\n    _('#keys-results-display').innerHTML = '<dl class=\"dl-horizontal\">' + keys.map(function (key, i) {\n      return '<dt>' + escape(key.name) + '</dt><dd>' +\n      (result[i + 1] ? escape(result[i + 1]) : '&nbsp;') + '</dd>'\n    }).join('') + '</dl>'\n  } else {\n    show('.is-not-match')\n    hide('.is-match')\n  }\n}\nsetVersion()\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","module.exports = require('path-to-regexp')\n","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n","/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || '/'\n  var delimiters = (options && options.delimiters) || './'\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value))\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      if (keys) keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  // In non-strict mode we allow a delimiter at the end of a match.\n  if (!strict) {\n    route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n  }\n\n  if (end) {\n    route += endsWith === '$' ? endsWith : '(?=' + endsWith + ')'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Expose `pathtoRegexp`.\n */\n\nmodule.exports = pathtoRegexp;\n\n/**\n * Match matching groups in a regular expression.\n */\nvar MATCHING_GROUP_REGEXP = /\\((?!\\?)/g;\n\n/**\n * Normalize the given path string,\n * returning a regular expression.\n *\n * An empty array should be passed,\n * which will contain the placeholder\n * key names. For example \"/user/:id\" will\n * then contain [\"id\"].\n *\n * @param  {String|RegExp|Array} path\n * @param  {Array} keys\n * @param  {Object} options\n * @return {RegExp}\n * @api private\n */\n\nfunction pathtoRegexp(path, keys, options) {\n  options = options || {};\n  keys = keys || [];\n  var strict = options.strict;\n  var end = options.end !== false;\n  var flags = options.sensitive ? '' : 'i';\n  var extraOffset = 0;\n  var keysOffset = keys.length;\n  var i = 0;\n  var name = 0;\n  var m;\n\n  if (path instanceof RegExp) {\n    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {\n      keys.push({\n        name: name++,\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    return path;\n  }\n\n  if (Array.isArray(path)) {\n    // Map array parts into regexps and return their source. We also pass\n    // the same keys and options instance into every generation to get\n    // consistent matching groups before we join the sources together.\n    path = path.map(function (value) {\n      return pathtoRegexp(value, keys, options).source;\n    });\n\n    return new RegExp('(?:' + path.join('|') + ')', flags);\n  }\n\n  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))\n    .replace(/\\/\\(/g, '/(?:')\n    .replace(/([\\/\\.])/g, '\\\\$1')\n    .replace(/(\\\\\\/)?(\\\\\\.)?:(\\w+)(\\(.*?\\))?(\\*)?(\\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {\n      slash = slash || '';\n      format = format || '';\n      capture = capture || '([^\\\\/' + format + ']+?)';\n      optional = optional || '';\n\n      keys.push({\n        name: key,\n        optional: !!optional,\n        offset: offset + extraOffset\n      });\n\n      var result = ''\n        + (optional ? '' : slash)\n        + '(?:'\n        + format + (optional ? slash : '') + capture\n        + (star ? '((?:[\\\\/' + format + '].+?)?)' : '')\n        + ')'\n        + optional;\n\n      extraOffset += result.length - match.length;\n\n      return result;\n    })\n    .replace(/\\*/g, function (star, index) {\n      var len = keys.length\n\n      while (len-- > keysOffset && keys[len].offset > index) {\n        keys[len].offset += 3; // Replacement length minus asterisk length.\n      }\n\n      return '(.*)';\n    });\n\n  // This is a workaround for handling unnamed matching groups.\n  while (m = MATCHING_GROUP_REGEXP.exec(path)) {\n    var escapeCount = 0;\n    var index = m.index;\n\n    while (path.charAt(--index) === '\\\\') {\n      escapeCount++;\n    }\n\n    // It's possible to escape the bracket.\n    if (escapeCount % 2 === 1) {\n      continue;\n    }\n\n    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {\n      keys.splice(keysOffset + i, 0, {\n        name: name++, // Unnamed matching groups must be consistently linear.\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    i++;\n  }\n\n  // If the path is non-ending, match until the end or a slash.\n  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\\\/|$)'));\n\n  return new RegExp(path, flags);\n};\n","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n"]}